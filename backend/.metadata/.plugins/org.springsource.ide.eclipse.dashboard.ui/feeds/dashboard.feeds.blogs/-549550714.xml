<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Spring]]></title><description><![CDATA[Level up your Java code and explore what Spring can do for you.]]></description><link>https://spring.io</link><generator>GatsbyJS</generator><lastBuildDate>Wed, 12 Mar 2025 13:47:50 GMT</lastBuildDate><item><title><![CDATA[Spring Tools 4.29.0 released]]></title><link>https://spring.io/blog/2025/03/12/spring-tools-4-29-0-released</link><guid isPermaLink="true">https://spring.io/blog/2025/03/12/spring-tools-4-29-0-released</guid><dc:creator><![CDATA[martinlippert]]></dc:creator><pubDate>Wed, 12 Mar 2025 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Dear Spring Community,&lt;/p&gt;
&lt;p&gt;I am happy to announce the 4.29.0 release of the Spring Tools for Visual Studio Code, Eclipse and Theia.&lt;/p&gt;
&lt;h4 id=&quot;important-highlights&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#important-highlights&quot; aria-label=&quot;important highlights permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;important highlights&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;(Spring Boot)&lt;/em&gt; Early access: inject bean completion proposals available in Spring components&lt;/li&gt;
&lt;li&gt;&lt;em&gt;(Spring Boot)&lt;/em&gt; Experimental Spring structural view in the outline (work in progress, available in VSCode only)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;updates-to-the-spring-tools-for-eclipse-distribution&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#updates-to-the-spring-tools-for-eclipse-distribution&quot; aria-label=&quot;updates to the spring tools for eclipse distribution permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;updates to the Spring Tools for Eclipse distribution&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;updated to Eclipse 2025-03 release (&lt;a href=&quot;https://eclipseide.org/release/noteworthy/&quot;&gt;new and noteworthy&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Detailed changes can be found in the release notes: &lt;a href=&quot;https://github.com/spring-projects/sts4/releases/tag/4.29.0.RELEASE&quot;&gt;https://github.com/spring-projects/sts4/releases/tag/4.29.0.RELEASE&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;downloads&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#downloads&quot; aria-label=&quot;downloads permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;downloads&lt;/h4&gt;
&lt;p&gt;To download the distribution for Eclipse and find links to the marketplace entries for Visual Studio Code and Theia, please go visit:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spring Tools: &lt;a href=&quot;https://spring.io/tools/&quot;&gt;https://spring.io/tools/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Spring Tools 4.30.0 is scheduled to be released in late April 2025.&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[This Week in Sprng - March 11th, 2025]]></title><link>https://spring.io/blog/2025/03/11/this-week-in-spring-march-11th-2025</link><guid isPermaLink="true">https://spring.io/blog/2025/03/11/this-week-in-spring-march-11th-2025</guid><dc:creator><![CDATA[joshlong]]></dc:creator><pubDate>Tue, 11 Mar 2025 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Hi, Spring fans! Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! It&apos;s a busy week as always, fresh off the rush that was Devnexus and busily preparing for the fun that is JavaOne! It&apos;s going to be epic!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;want to learn about dependency injection, auto-configuration, Spring Framework, Spring Data (JDBC), Spring MVC, Spring Batch, Spring Integration, Spring AMQP, Spring Modulith, Testing, Virtual Threads, GraalVM, Docker Compose, Observability, Spring AI, Spring GraphQL, Spring gRPC, Spring Security, Spring Cloud Config Server, OAuth Resource Servers, Spring Authorization Server, OAuth Clients, Spring Cloud Config Client, Spring Cloud Gateway, and Spring Boot? &lt;a href=&quot;https://www.youtube.com/watch?v=GAgelbsTb9M&quot;&gt;Then look no further! I put together a two hour video tutorial for you&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;Spring legend S?bastien Deleuze has an &lt;a href=&quot;https://spring.io/blog/2025/03/10/null-safety-in-spring-apps-with-jspecify-and-null-away&quot;&gt;awesome blog on &lt;code&gt;null&lt;/code&gt; safety with Spring applications and &lt;code&gt;NullAway&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;the new &lt;a href=&quot;https://spring.io/blog/2025/03/10/spring-grpc-0-5-0-available-now&quot;&gt;Spring gRPC 0.5.0 release is &lt;em&gt;awesome&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;in last week&apos;s installment of &lt;em&gt;A Bootiful Podcast&lt;/em&gt;, &lt;a href=&quot;https://spring.io/blog/2025/03/06/a-bootiful-podcast-johannes-bechberger&quot;&gt;I talked to Johannes Bechberger, JDK engineer at SAP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=dPJXKls7kl8&quot;&gt;I did an interview on the Java Challengers channel&lt;/a&gt; with my friend Rafael Del Niro!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.vmware.com/tanzu/getting-started-with-spring-cloud-gateway-extensions/&quot;&gt;Spring Cloud Gateway Enterprise Extensions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;nice video on how to &lt;a href=&quot;https://www.youtube.com/watch?v=L6hYN21AV2U&quot;&gt;use SchedLock with Spring Boot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Null Safety in Spring applications with JSpecify and NullAway]]></title><link>https://spring.io/blog/2025/03/10/null-safety-in-spring-apps-with-jspecify-and-null-away</link><guid isPermaLink="true">https://spring.io/blog/2025/03/10/null-safety-in-spring-apps-with-jspecify-and-null-away</guid><dc:creator><![CDATA[sdeleuze]]></dc:creator><pubDate>Mon, 10 Mar 2025 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;The initial introduction of the null safety support in Spring dates back to 2017 and the release of Spring Framework 5.0. In 2025, we are evolving that story to bring more added value for Spring developers, either in Java or Kotlin. But before having a deeper look to the changes we are working on, let me explain why we do that and what are the expected benefits.&lt;/p&gt;
&lt;h2 id=&quot;what-problem-do-we-try-to-solve&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#what-problem-do-we-try-to-solve&quot; aria-label=&quot;what problem do we try to solve permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;What problem do we try to solve?&lt;/h2&gt;
&lt;p&gt;Let&apos;s take a concrete example, and say we are using a library that provides a &lt;code&gt;TokenExtractor&lt;/code&gt; interface defined as follow:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;interface TokenExtractor {
    
    /**
     * Extract a token from a {@link String}.
     * @param input the input to process
     * @return the extracted token
    */
    String extractToken(String input);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If for some reason the implementation returns &lt;code&gt;null&lt;/code&gt;, the access to a null reference in &lt;code&gt;token.length()&lt;/code&gt; like below causes a &lt;code&gt;NullPointerException&lt;/code&gt; which typically ends up at runtime in producing an HTTP response with a &lt;code&gt;500 Internal Server Error&lt;/code&gt; status code.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;package com.example;

String token = extractor.extractToken(&quot;...&quot;);
System.out.println(&quot;The token has a length of &quot; + token.length());
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since this error could happen only in some cases (for example with very specific inputs that have not been tested), this can be detected pretty late in production, generating end-user frustration or even preventing transactions to happen, reducing your company revenue, damaging your brand and involving latency and cost to fix.&lt;/p&gt;
&lt;p&gt;This kind of error is so frequent that the inventor of null references himself, &lt;a href=&quot;https://en.wikipedia.org/wiki/Tony_Hoare&quot;&gt;Tony Hoare&lt;/a&gt;, hyperbolically apologized for inventing it and called it &quot;my billion-dollar mistake&quot;. But as brilliantly demonstrated by &lt;a href=&quot;https://kotlinlang.org/&quot;&gt;Kotlin&lt;/a&gt;, the root issue is not null references by themselves, but the fact that they are not explicitly specified in the type system.&lt;/p&gt;
&lt;p&gt;In Java, non primitive type usage nullness is unspecified. A parameter may accept or not a null argument. A return value could be nullable or non-null. You don&apos;t know and have to rely on reading the Javadoc or analyzing the implementation to figure out. But even if the library author document it, it is usually not consistent across all the APIs, there are usually no automated checks and you can&apos;t really know if a parameter/return value is really non-null or if the library author just forgot to document it is nullable. This is by design error prone, and you have no proper way to fix this issue.&lt;/p&gt;
&lt;h2 id=&quot;jspecify-and-nullaway&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#jspecify-and-nullaway&quot; aria-label=&quot;jspecify and nullaway permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JSpecify and NullAway&lt;/h2&gt;
&lt;p&gt;The solution to this insidious problem is to make the nullness of type usages explicit for all APIs, and to have related automatic checks for consistency in our IDE and our builds. Since Java does not provide &lt;a href=&quot;https://openjdk.org/jeps/8303099&quot;&gt;null-restricted and nullable types&lt;/a&gt; yet, we need a way to specify the nullness of Spring APIs.&lt;/p&gt;
&lt;p&gt;In 2017, we chose to introduce &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/lang/package-summary.html&quot;&gt;Spring nullability annotations&lt;/a&gt;, which were built on top of &lt;a href=&quot;https://jcp.org/en/jsr/detail?id=305&quot;&gt;JSR 305&lt;/a&gt; (a dormant but widespread JSR) semantics and annotations. It was far from perfect due to technical limitations, unclear status, lack of proper specification, but it was the best pragmatic choice we identified at that point. The Spring team then joined a working group led by Google bringing together several companies invested in the JVM ecosystem like JetBrains, Oracle, Uber, VMware/Broadcom and others in order to design and contribute a better solution not tied to a specific verification tool. This was the beginning of JSpecify.&lt;/p&gt;
&lt;p&gt;A misunderstanding I observe frequently about nullness is that at first, you may have the feeling it is mainly about choosing one of the &lt;a href=&quot;https://stackoverflow.com/questions/76630457/what-nullable-to-use-in-java-as-of-2023-jdk21&quot;&gt;numerous &lt;code&gt;@Nullable&lt;/code&gt; variants&lt;/a&gt;, but it is just the small visible part of the iceberg. Those annotations need to come with a proper specification, tooling support, etc. Agreeing on a common nullness specification in a collaborative way is the reason why it took multiple years for JSpecify to reach 1.0.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://jspecify.dev/&quot;&gt;JSpecify&lt;/a&gt; is a set of &lt;a href=&quot;https://github.com/jspecify/jspecify/tree/main/src/main/java/org/jspecify/annotations&quot;&gt;annotations&lt;/a&gt;, &lt;a href=&quot;https://jspecify.dev/docs/spec/&quot;&gt;specifications&lt;/a&gt; and &lt;a href=&quot;https://jspecify.dev/docs/user-guide/&quot;&gt;documentation&lt;/a&gt; designed to ensure the null safety of Java applications and libraries in the IDE or during the compilation thanks to tools like &lt;a href=&quot;https://github.com/uber/NullAway&quot;&gt;NullAway&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A key point to understand is that by default, the nullness of type usages is unspecified in Java, and that non-null type usages are by far more frequent than nullable ones. In order to keep codebases readable, we typically want to define that by default, on a specific scope, type usages are non-null unless marked as nullable. This is exactly the purpose of &lt;a href=&quot;https://jspecify.dev/docs/api/org/jspecify/annotations/NullMarked.html&quot;&gt;&lt;code&gt;@NullMarked&lt;/code&gt;&lt;/a&gt; that is typically set at package level via a &lt;code&gt;package-info.java&lt;/code&gt; file, for example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@NullMarked
package org.example;

import org.jspecify.annotations.NullMarked;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This annotation changes the default nullness for type usages from &quot;unspecified&quot; (Java default) to &quot;non-null&quot; (JSpecify &lt;code&gt;@NullMarked&lt;/code&gt; default). So we can now refine our API and documentation accordingly.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;package org.example;

interface TokenExtractor {
    
    /**
     * Extract a token from a {@link String}.
     * @param input the input to process
     * @return the extracted token or {@code null} if not found
    */
    @Nullable String extractToken(String input);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The IDE now properly warns us of a potential &lt;code&gt;NullPointerException&lt;/code&gt; when invoking a method on the return value, and would also complain if we were passing a &lt;code&gt;null&lt;/code&gt; argument since this null-marked code default is non-null.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://static.spring.io/blog/sdeleuze/20250307/nullness-ide-warning.png&quot; alt=&quot;IDE null safety warning&quot;&gt;&lt;/p&gt;
&lt;p&gt;While we could ignore or miss those IDE warnings, the consistency of the nullness annotations across the codebase can be checked at build time with &lt;a href=&quot;https://github.com/uber/NullAway&quot;&gt;NullAway&lt;/a&gt; configured to throw errors. If an inconsistency is found, the build breaks, preventing by design to ship null unsafe APIs (except for non annotated types coming from third-party dependencies).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&gt; Task :compileJava FAILED
/Users/sdeleuze/workspace/jspecify-nullway-demo/src/main/java/org/example/Main.java:7: error: [NullAway] dereferenced expression token is @Nullable
                System.out.println(&quot;The token has a length of &quot; + token.length());
                                                                       ^
    (see http://t.uber.com/nullaway )
1 error
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See &lt;a href=&quot;https://github.com/sdeleuze/jspecify-nullway-demo&quot;&gt;https://github.com/sdeleuze/jspecify-nullway-demo&lt;/a&gt; if you want to try it by yourself or to see an example of a related &lt;a href=&quot;https://github.com/sdeleuze/jspecify-nullway-demo/blob/main/build.gradle&quot;&gt;Gradle build&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Those nullness errors enforce that the developer using those APIs handles the null references explicitly:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;String token = extractor.extractToken(&quot;...&quot;);
if (token == null) {
    System.out.println(&quot;No token found&quot;);	
}
else {
    System.out.println(&quot;The token has a length of &quot; + token.length());
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You may object that java &lt;a href=&quot;https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/Optional.html&quot;&gt;&lt;code&gt;Optional&amp;#x3C;T&gt;&lt;/code&gt;&lt;/a&gt; has been designed to express the presence or absence of value. But in practice, &lt;code&gt;Optional&amp;#x3C;T&gt;&lt;/code&gt; is not usable in a lot of use cases because it introduces a runtime overhead (at least until Project Valhalla value classes are available), it increases the code and API complexity, it is not a good fit for parameters and it breaks existing API signatures.&lt;/p&gt;
&lt;h2 id=&quot;next-level-null-safety-in-spring-upcoming-major&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#next-level-null-safety-in-spring-upcoming-major&quot; aria-label=&quot;next level null safety in spring upcoming major permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Next level null safety in Spring upcoming major&lt;/h2&gt;
&lt;p&gt;Spring Framework 7 (currently in milestone phase) has already switched to JSpecify its whole codebase. You can find related documentation &lt;a href=&quot;https://docs.spring.io/spring-framework/reference/7.0-SNAPSHOT/core/null-safety.html&quot;&gt;here&lt;/a&gt;. A key improvement compared to the previous incarnation is that the nullness is now also specified for arrays/varargs elements, as well as generic types. That&apos;s great for Java developers, but also for Kotlin ones who will see idiomatic null-safe APIs like if Spring was written in Kotlin.&lt;/p&gt;
&lt;p&gt;But the biggest improvement is that the whole Spring team currently works on tentatively provide null-safe APIs across the whole Spring portfolio with related build-time checks to ensure consistency. This is an ongoing process, and no promise yet we will be able to complete it when Spring Boot 4.0 will be released in November, but we try to come as close as possible of a complete coverage. &lt;a href=&quot;https://projectreactor.io/&quot;&gt;Project Reactor&lt;/a&gt; and &lt;a href=&quot;https://micrometer.io/&quot;&gt;Micrometer&lt;/a&gt; are also in the scope.&lt;/p&gt;
&lt;p&gt;When Spring Boot 4 will be released and used in your applications, especially if you enable those nullness checks at application level as well, the risk of &lt;code&gt;NullPointerException&lt;/code&gt; on production will be very significantly reduced if not removed, as it will only be possible for types coming from 3rd party libraries. By specifying where null references may happen explicitly, handling those code paths, and introducing related automatic checks, we turn &quot;the billion dollar mistake&quot; into a zero cost abstraction allowing to express the potential absence of value, increasing significantly the safety of Spring applications.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring gRPC 0.5.0 available now]]></title><link>https://spring.io/blog/2025/03/10/spring-grpc-0-5-0-available-now</link><guid isPermaLink="true">https://spring.io/blog/2025/03/10/spring-grpc-0-5-0-available-now</guid><dc:creator><![CDATA[dsyer]]></dc:creator><pubDate>Mon, 10 Mar 2025 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the team and everyone who has contributed, I&apos;m happy to announce that Spring gRPC &lt;code&gt;0.5.0&lt;/code&gt; has been released and is now available from Maven Central.&lt;/p&gt;
&lt;p&gt;This release includes &lt;a href=&quot;https://github.com/spring-projects-experimental/spring-grpc/releases/tag/v0.5.0&quot;&gt;features, bug fixes, documentation improvements, and dependency upgrades&lt;/a&gt;. Thanks to all those who have contributed with issue reports and pull requests.&lt;/p&gt;
&lt;h3 id=&quot;how-can-you-help&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#how-can-you-help&quot; aria-label=&quot;how can you help permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How can you help?&lt;/h3&gt;
&lt;p&gt;If you&apos;re interested in helping out, check out the open &lt;a href=&quot;https://github.com/spring-projects-experimental/spring-grpc/issues&quot;&gt;issues&lt;/a&gt;.
If you have general questions, please ask on Stack Overflow using the &lt;a href=&quot;https://stackoverflow.com/tags/spring-grpc&quot;&gt;&lt;code&gt;spring-grpc&lt;/code&gt; tag&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/spring-projects-experimental/spring-grpc&quot;&gt;GitHub&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects-experimental/spring-grpc/issues&quot;&gt;Issues&lt;/a&gt; | &lt;a href=&quot;https://docs.spring.io/spring-grpc/reference/&quot;&gt;Documentation&lt;/a&gt; | &lt;a href=&quot;https://stackoverflow.com/tags/spring-grpc&quot;&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt;</content:encoded></item></channel></rss>